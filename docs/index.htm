<!DOCTYPE html>
<!-- saved from url=(0090)https://wiki.harvard.edu/confluence/plugins/viewsource/viewpagesrc.action?pageId=233985633 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>View Source</title>
        <link rel="canonical" href="https://wiki.harvard.edu/confluence/pages/viewpage.action?pageId=$action.page.id">
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u005C/confluence\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="./index_files/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/confluence/s/4e8d0c729f7c97018599cdecbf07fec1-CDN/en_GB/7502/a025d1ea507f6473e7dfa3a92b4a4cc699e1e6ac/2eeaf8c35018fd07724c679acf411848/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/confluence/s/4e8d0c729f7c97018599cdecbf07fec1-CDN/en_GB/7502/a025d1ea507f6473e7dfa3a92b4a4cc699e1e6ac/2eeaf8c35018fd07724c679acf411848/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="./index_files/batch(1).css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="./index_files/batch(2).css" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="./index_files/batch(3).css" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/confluence/s/d4e6f3d1effdb4ca5b4d7572ffc9d382-CDN/en_GB/7502/a025d1ea507f6473e7dfa3a92b4a4cc699e1e6ac/908461e161ba1eadfdc359627ab43734/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="./index_files/colors.css" media="all">
<link type="text/css" rel="stylesheet" href="./index_files/custom.css" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <p><img class="editor-inline-macro" src="./index_files/macro" data-macro-name="toc" data-macro-id="a6d7add9-ad79-494f-afc2-170108742a4f" data-macro-schema-version="1"></p><h1>Instructions for OS X</h1><h2>Configure Git</h2><table class="wysiwyg-macro" data-macro-name="note" data-macro-id="edd65698-9ca5-4094-b5e3-7ec073d7f1cf" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e25vdGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="RICH_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><p>This section is optional</p></td></tr></tbody></table><p>If you will be working with git on the command line, you will benefit from configuring a custom shell prompt. Examples:</p><p>(Plain) <a href="https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh">https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh</a></p><p>(Fancy) <a href="https://github.com/magicmonty/bash-git-prompt">https://github.com/magicmonty/bash-git-prompt</a></p><h2>Download/pull the Sid repository</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="72895fcd-12df-4078-8586-9b773037a399" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>cd ~/projects
git clone&nbsp;git@github.com:hmdc/sid.git
cd sid
git pull </pre></td></tr></tbody></table><h2>Install Brew</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="5bd2e0fa-3d32-4f19-8603-895ff6a1e61d" data-macro-parameters="language=bash|title=Install Brew" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaHx0aXRsZT1JbnN0YWxsIEJyZXd9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>which brew || ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</pre></td></tr></tbody></table><h2><span>Install Docker<br></span></h2><div><span><br></span></div><div><span><a href="https://docs.docker.com/docker-for-mac/install/">https://docs.docker.com/docker-for-mac/install/</a></span></div><div><span><br></span></div><div><span>This requires creating a (free) Docker Hub account.</span></div><div><span><br></span></div><div><h2><span>Configure Docker</span></h2><p><span>Run the Docker.app and do the setup.<br></span></p></div><h2>Install VirtualBox&nbsp;</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="f0b0a3de-8f6e-4da8-b31f-de116716ddc3" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>which virtualbox || brew cask install virtualbox
brew cask upgrade virtualbox</pre></td></tr></tbody></table><div>When prompted, open System Preferences -&gt; Security &amp; Privacy and allow the installation of software from "Oracle America, Inc."</div><div>You may need to allow the KEXT in Settings for the installation to work if you see the error while installing Virtual Box:</div><p><code>The install failed (The Installer encountered an error that caused the installation to fail. Contact the software manufacturer for assistance.)</code></p><div>See&nbsp;<a href="https://apple.stackexchange.com/questions/300510/virtualbox-5-1-8-installation-didnt-install-kernel-extensions-how-do-i-fix-thi">https://apple.stackexchange.com/questions/300510/virtualbox-5-1-8-installation-didnt-install-kernel-extensions-how-do-i-fix-thi</a>&nbsp;for further details.</div><h2>Install/Upgrade Node@10</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="9b109b6b-e01c-48dd-baf5-5fbdbf2eb244" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>node --version |grep -q "^v10\." || brew unlink node
node --version |grep -q "^v10\." || brew install node@10
brew upgrade node@10
brew link --overwrite --force node@10
</pre></td></tr></tbody></table><p>If you already have the latest version, <code>brew upgrade</code> will say <code>already installed</code></p><h2>Install and Configure Minikube v0.27.0</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="fdd844c5-4b8a-4b11-91e9-b56d286953fa" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>( minikube version |fgrep -q v0.27.0 ) || ( brew cask uninstall minikube; brew cask install https://raw.githubusercontent.com/Homebrew/homebrew-cask/14a56ae5519e014d70d8da55d206b0c20b5a7c3a/Casks/minikube.rb )
which kubectl || brew install kubernetes-cli
brew upgrade kubernetes-cli
minikube config set vm-driver virtualbox</pre></td></tr></tbody></table><h2>Start minikube</h2><div>This will take a few minutes.</div><div>You may use between 4096 and 8092 (MB) of memory.</div><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="a2b67fdf-ea36-4cb1-9c1f-76243495ea58" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>minikube start --memory 8092 --cpus 4
</pre></td></tr></tbody></table><h2><span style="color: rgb(48,48,48);">Add Sid service account permissions<br></span></h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="ac9dacb9-6df1-4a31-82ae-abbb8ae0cf81" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>kubectl create -f kube-seed/permissions.yaml</pre></td></tr></tbody></table><div><p>You should see:</p><pre>serviceaccount/sid-job-runner created<br>role.rbac.authorization.k8s.io/sid-job-runner created<br>rolebinding.rbac.authorization.k8s.io/sid-job-runner-role-binding created</pre><p><code>kubectl</code>&nbsp;can also verify the successful creation of the role:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="c868d8cf-2f16-4cbe-984e-ed79333e981a" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>kubectl get roles
NAME             AGE
sid-job-runner   28s</pre></td></tr></tbody></table><p class="auto-cursor-target">To test API access:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="78ea2e19-9e6d-482d-b16b-bc04d5e33a3c" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>KUBERNETES_URL=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")
SECRET_NAME=$(kubectl get secrets | grep ^sid-job-runner | cut -f1 -d ' ')
KUBERNETES_TOKEN=$(kubectl describe secret $SECRET_NAME | grep -E '^token' | cut -f2 -d':' | tr -d " ")
curl -i ${KUBERNETES_URL}/api --header "Authorization: Bearer ${KUBERNETES_TOKEN}" --insecure</pre></td></tr></tbody></table><h2><span style="color: rgb(48,48,48);">Add priority classes<br></span></h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="8c37e6f6-9555-470d-867e-fc941774bbd5" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>kubectl create -f kube-seed/priorityclasses.yaml</pre></td></tr></tbody></table><p>You should see:</p><pre>priorityclass.scheduling.k8s.io/high-priority created<br>priorityclass.scheduling.k8s.io/interactive-job created</pre><h2 class="auto-cursor-target">Enable NGINX Ingress Controller</h2></div><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="456a01cf-1a7f-4039-b465-760b158aef2d" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>minikube addons enable ingress
</pre></td></tr></tbody></table><div>You should see:</div><p><code>✅&nbsp; ingress was successfully enabled</code></p><p>&nbsp;</p><div><h2>Edit /etc/hosts</h2><p>Open a new terminal tab and run</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="35ecdc7a-5e28-45fe-b1c4-b0be18801a2b" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>minikube ip</pre></td></tr></tbody></table><div><div>Set /etc/hosts <code>aws.development.sid.hmdc.harvard.edu</code>&nbsp;<strong>to be the output of this command<br></strong></div></div><div>Set /etc/hosts <code>development.sid.hmdc.harvard.edu</code>&nbsp;to 127.0.0.1</div><div><p>&nbsp;</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="4c895527-91be-4d50-b18e-70e81b3523f7" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>sudo vi /etc/hosts</pre></td></tr></tbody></table><p>such that the localhost line looks like this:<br><code>127.0.0.1 localhost development.sid.hmdc.harvard.edu</code></p><p><br></p><p>If you've already edited your <code>/etc/hosts</code> to include these lines, you can update it with:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="34cac1d4-0f99-4e26-87d8-f1ef8c2da91e" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>sudo sed -E -e 's/^[0-9.]+( +aws\.development\.sid\.hmdc\.harvard\.edu)/'$(minikube ip)'\1/' -i .`date +%F` /etc/hosts</pre></td></tr></tbody></table><h2 class="auto-cursor-target">Start the rest of the application support</h2></div></div><div><p>&nbsp;</p><p>Open a new terminal tab and start redis</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="36569677-a0c8-4690-8ca2-f0cbc600a660" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>docker run -p 6379:6379 redis
</pre></td></tr></tbody></table><p>Open a new terminal tab and start mongo</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="ed6e8336-f6b2-490e-97e5-f078c5384374" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>docker run -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo</pre></td></tr></tbody></table><h2>Install mongoimport</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="755fa829-4b20-4542-805e-c462f6505d4c" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>which mongoimport || brew install mongo
brew upgrade mongo</pre></td></tr></tbody></table><p>You only need mongoimport. Using brew to install mongo is the easiest way.&nbsp;</p></div><h2>Import required Mongo files into mongo</h2><div><span><br></span></div><div>These files are in your Sid checkout under mongo-seed/</div><div><p>&nbsp;</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="a9f28924-ef7b-4314-a18a-3f84c2a6767d" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>cd ~/projects/sid/mongo-seed
mongoimport -h localhost -u mongoadmin -p secret --db rce_database --collection VMDs --type json --file ./limits.json&nbsp;&nbsp;&nbsp;--jsonArray --authenticationDatabase admin
mongoimport -h localhost -u mongoadmin -p secret --db rce_database --collection applications --type json --file ./applications.json&nbsp;&nbsp;--jsonArray --authenticationDatabase admin</pre></td></tr></tbody></table><p>You should see:</p><p><code>connected to: localhost</code><br><code>imported 1 document</code></p></div><h2>Install all NodeJS dependencies</h2><p>CD to your Sid checkout and run npm install</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="fbccbbf2-ebd0-41f6-afe2-8c308d577c32" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>cd ~/projects/sid/
npm install</pre></td></tr></tbody></table><p>You should see:</p><p><code>added nnnn packages from mmmm contributors and audited xxxx packages in yy.yyys</code></p><p>Or if you have previously installed the packages:</p><p><code>audited xxxx packages in yy.zzz</code></p><h2>Run the Sid Worker</h2><p>Run this command in the root of your Sid checkout:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="c76c7ed0-19cd-4ae0-a114-10a84acbe7fd" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>env BACKEND_ENV=development \
 KUBERNETES_CA_CERT=$(base64 ~/.minikube/ca.crt) \
 KUBERNETES_URL=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ") \
 KUBERNETES_TOKEN=$(kubectl describe secret $(kubectl get secrets | grep ^sid-job-runner | cut -f1 -d ' ') | grep -E '^token' | cut -f2 -d':' | tr -d " ") \
&nbsp;node worker/index.js</pre></td></tr></tbody></table><p>The command will return no output and will seize the terminal.</p><p>&nbsp;</p><div><h2>Set the CAS Server URL</h2><p>Open a new terminal tab.</p><h3>Production HarvardKey CAS Server</h3><p>To use the Production HarvardKey server for login, run:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="0f612794-bff8-4a68-a77c-6758216b1927" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>USE_MOCK_CAS=0; CAS_URL='https://www.pin1.harvard.edu/cas'</pre></td></tr></tbody></table><h3>Public Demo CAS Server URL</h3></div><div>Or, use <a href="https://apereo.github.io/cas/5.1.x/#demos">the demo<span class="external-link"> CAS server</span></a>&nbsp;to bypass use of HarvardKey's production servers.<p>DO NOT use the demo CAS server if you want to test application authentication with the actual HarvardKey system.</p></div><p>To use the Public Demo CAS server for login, run:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="a417d53b-c076-491b-9276-eeb6bd73f2a1" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>USE_MOCK_CAS=1; CAS_URL='https://casserver.herokuapp.com/cas'</pre></td></tr></tbody></table><div>When using the demo CAS server, log in as <code>casuser / Mellon</code>.</div><h2>Set Google App Credentials</h2><div><p>Install the Heroku CLI:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="a16b2eff-1d3c-4e1c-90d6-a4ce4c881902" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>which heroku || brew install heroku
brew upgrade heroku
</pre></td></tr></tbody></table><p><br></p><p>Retrieve the&nbsp;GDRIVE_CLIENT_ID and&nbsp;GDRIVE_CLIENT_SECRET from the <code><span class="flex items-center pv--3 ph1"><span class="ml1">iqss-sid-env-uat</span></span></code> app and set the values in environment variables:</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="88473010-e2db-47de-88a9-a28c176d3440" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>GDRIVE_CLIENT_ID=$(heroku config:get --app iqss-sid-env-uat GDRIVE_CLIENT_ID)
GDRIVE_CLIENT_SECRET=$(heroku config:get --app iqss-sid-env-uat GDRIVE_CLIENT_SECRET)</pre></td></tr></tbody></table><p>If UAT is down, you can also get these values from <code>sid-tf <a href="https://github.com/hmdc/sid-tf/blob/master/providers/aws/sid/uat.tfvars">uat.tfvars</a></code> and the RCE.</p><p>GDRIVE_CLIENT_ID is tfvars <span class="pl-smi">gdrive_client_id</span>, and GDRIVE_CLIENT_SECRET is in the file specified by tfvars <span class="pl-smi">google_drive_secret_path</span>.</p><h2>Run the Sid frontend</h2><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="c0402028-39d0-429e-a3ad-1bb71d51b6cb" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>cd ~/projects/sid
sudo env \
 GDRIVE_CLIENT_ID=${GDRIVE_CLIENT_ID} \
 GDRIVE_CLIENT_SECRET=${GDRIVE_CLIENT_SECRET} \
 GDRIVE_CALLBACK_URL=https://development.sid.hmdc.harvard.edu/auth/storage/google/callback \
&nbsp;DEBUG="*" \
 BACKEND_ENV=development \
 NODE_ENV=local \
&nbsp;EXPRESS_SECRET=abc \
 serverBaseURLHarvardLogin='https://development.sid.hmdc.harvard.edu' \
 serviceURLHarvardLogin='https://development.sid.hmdc.harvard.edu/login' \
 ssoBaseURLHarvardLogin="${CAS_URL}" \
 USE_MOCK_CAS=${USE_MOCK_CAS} \
&nbsp;MONGODB_URI='mongodb://mongoadmin:secret@localhost/rce_database?authSource=admin' \
 ./node_modules/gulp/bin/gulp.js run</pre></td></tr></tbody></table><p class="auto-cursor-target">&nbsp;</p></div><div>When prompted "Do you want the application “node” to accept incoming network connections?" click "Allow".</div><div>You need sudo to bind to :443. Requirement of validating CAS.</div><div>If the app crashes with the error <code>Broken @import declaration of "<span class="nolink">https://fonts.googleapis.com/...</span>" - timeout</code>, this is just a transient error. Run it again.<code> </code></div><div>Go to <a href="https://development.sid.hmdc.harvard.edu/">https://development.sid.hmdc.harvard.edu</a></div><div>You should be able to submit a job and view the desktop once launched. The initial launch of the desktop on your local installation can take up to 10 minutes.</div><div>To keep a more detailed eye on progress, open a new terminal tab and run</div><div><p>&nbsp;</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="bf25b180-784c-495d-8cfe-adccb75472e0" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>kubectl get pods</pre></td></tr></tbody></table><h2>Site Certificates</h2><p>Your web browser may throw an error about an invalid certificate when logging in to the Sid frontend and again when bringing up the Xpra desktop via the aws.sid link (since we are using self-signed certificates for <code>development.sid.hmdc.harvard.edu</code> and <code>aws.sid.hmdc.harvard.edu</code>, and auto-generating the <code>aws.sid</code> certificate with a different hostname).</p><h3>Chrome</h3><p>Google Chrome may throw a&nbsp;<code>NET::ERR_CERT_AUTHORITY_INVALID</code>&nbsp;error.</p><p>Click "Advanced", "<span class="small-link">Proceed to ....sid.hmdc.harvard.edu (unsafe)</span>"</p></div><h3>Firefox</h3><div><p>Mozilla Firefox will throw an "Insecure Connection" error.</p><p>Click "Advanced", "Add Exception...", "Confirm Security Exception"</p></div><h2>Disable Web Content Filtering on localhost</h2><p>You may need to disable web content filtering in order to access the Sid frontend, Sid jobs, or Docker containers (especially xpra) running on localhost.</p><p>If you are running ESET Endpoint Antivirus:</p><ul><li>Open the UI by clicking the "e" in the taskbar and selecting "Open ESET Endpoint Antivirus"</li><li>Select "Setup" and click "Web and Email"</li><li>Disable "Web access protection"<ul><li>In testing, only completely disabling "Web access protection" was effective. Whitelisting localhost still caused xpra connections to fail.</li></ul></li></ul><h2>Troubleshooting</h2><p>See <a class="confluence-link" href="https://wiki.harvard.edu/confluence/display/HMDC/Troubleshooting+Sid+in+Development" data-linked-resource-id="227876291" data-linked-resource-version="22" data-linked-resource-type="page" data-linked-resource-default-alias="Troubleshooting Sid in Development" data-base-url="https://wiki.harvard.edu/confluence">Troubleshooting Sid in Development</a></p><h2>Starting fresh</h2><div><p>&nbsp;</p><table class="wysiwyg-macro" data-macro-name="note" data-macro-id="e44e00a8-503a-44df-9a43-362b6290a79e" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e25vdGV9&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="RICH_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><p>This section is optional</p></td></tr></tbody></table><p>You may want to start fresh, run</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="0e69740a-c68c-4632-92f2-9b56e786db98" data-macro-parameters="language=bash" data-macro-schema-version="1" style="background-image: url(/confluence/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaH0&amp;locale=en_GB&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tbody><tr><td class="wysiwyg-macro-body"><pre>minikube delete
docker kill $(docker ps -q)
docker rm $(docker ps -a -q)
docker system prune -a
docker volume prune</pre></td></tr></tbody></table><p>&nbsp;</p><p>Start over from the beginning of these instructions to get a fresh dev environment. MiniKube does not save anything post-delete.</p><p>&nbsp;</p></div>
        <p>&nbsp;</p>
    

</body></html>